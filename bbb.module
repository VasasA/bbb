<?php
// $Id$

/**
 * @file
 * BigBlueButton - Enables universities and colleges to deliver a high-quality
 * learning experience.
 * 
 * @author
 * Stefan Auditor <stefan.auditor@erdfisch.de>
 */

// Security Salt
// see /var/lib/tomcat6/webapps/bigbluebutton/WEB-INF/classes/bigbluebutton.properties
define('BIGBLUEBUTTON_SECURITY_SALT', variable_get('bbb_security_salt', '76b71974198f26ecc5a594eddddf49d1'));

// Define API URLs
define('BIGBLUEBUTTON_BASE_URL', variable_get('bbb_base_url', 'http://195.34.183.204/bigbluebutton/'));
define('BIGBLUEBUTTON_CREATE_URL', 'api/create');
define('BIGBLUEBUTTON_JOIN_URL', 'api/join');
define('BIGBLUEBUTTON_END_MEETING_URL', 'api/endMeeting');
define('BIGBLUEBUTTON_GET_MEETING_INFO_URL', 'api/getMeetingInfo');
define('BIGBLUEBUTTON_IS_MEETING_RUNNING_URL', 'api/isMeetingRunning');

include_once(drupal_get_path('modules', 'bbb') . 'includes/bbb.api.inc');

/* Drupal Core Hooks */

/**
 * Implement hook_init().
 */
function bbb_init() {
  if (is_numeric($_SESSION['bbb_meeting_join'])) {
    $meeting = bbb_get_meeting($_SESSION['bbb_meeting_join']);
    if ($meeting->is_running) {
      drupal_set_message(t('%meeting has started, you may now !join.', array('%meeting' => $meeting->name, '!join' => l(t('join to attend'), 'node/' . $meeting->nid . '/join/attendee'))));
    }
  }
}

/**
 * Implement hook_perm().
 */
function bbb_perm() {
  return array('administer bigbluebutton', 'moderate meetings', 'moderate own meetings', 'attend meetings');
}

/**
 * Implement hook_menu().
 */
function bbb_menu() {
  $items = array();
  $items['node/%node/join/attendee'] = array(
    'page callback' => 'bbb_join',
    'page arguments' => array(1, 3),
    'access callback' => 'bbb_access_attendee',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['node/%node/join/moderator'] = array(
    'page callback' => 'bbb_join',
    'page arguments' => array(1, 3),
    'access callback' => 'bbb_access_moderator',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/bigbluebutton'] = array(
    'title' => 'BigBlueButton Conferencing',
    'description' => 'Default server and conference settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bbb_settings'),
    'access arguments' => array('administer bigbluebutton'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/bbb.pages.inc',
  );
  return $items;
}

/**
 * Check attendance access permissions; Menu access callback
 */
function bbb_access_attendee($node) {
  global $user;
  // Check for node access and access to join meetings
  if (node_access('view', $node) && 
     (user_access('attend meetings') || user_access('administer bigbluebutton'))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Check moderation access permissions; Menu access callback
 */
function bbb_access_moderator($node) {
  global $user;
  // Check for node access and access start meetings
  if (node_access('view', $node) && 
     ((user_access('moderate meetings') || user_access('administer bigbluebutton')) || 
       $user->uid == $node->uid && user_access('moderate own meetings'))) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implement form_alter().
 */
function bbb_form_alter(&$form, &$form_state, $form_id) {
  // Node type settings form
  if ($form_id == 'node_type_form') {
    $form['bbb_content_type_usage'] = array(
      '#type' => 'checkbox',
      '#title' => t('Treat this node type as BigBlueButton'),
      '#default_value' => variable_get('bbb_content_type_usage_' . $form['#node_type']->type, FALSE),
    );
  }

  // Node edit form
  if (drupal_substr($form_id, (drupal_strlen($form_id) - 10), 10) == '_node_form' && 
      bbb_is_meeting_type($form['type']['#value'])) {
    if (is_numeric($form['nid']['#value'])) {
      $meeting = bbb_get_meeting($form['nid']['#value']);
    }

    $form['bbb'] = array(
      '#title' => t('Conference settings'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#tree' => TRUE,
    );
    $form['bbb']['welcome'] = array(
      '#title' => t('Welcome message'),
      '#type' => 'textfield',
      '#default_value' => $meeting->welcome,
      '#maxlength' => 255,
      '#description' => t('A welcome message that gets displayed on the chat window when the participant joins. You can include keywords (%%CONFNAME%%, %%DIALNUM%%, %%CONFNUM%%) which will be substituted automatically.'),
    );
    $form['bbb']['dialNumber'] = array(
      '#title' => t('Dial number'),
      '#type' => 'textfield',
      '#default_value' => $meeting->dialNumber,
      '#maxlength' => 32,
      '#description' => t('The dial access number that participants can call in using regular phone.'),
    );
    $form['bbb']['moderatorPW'] = array(
      '#title' => t('Moderator password'),
      '#type' => 'textfield',
      '#default_value' => $meeting->moderatorPW,
      '#maxlength' => 32,
      '#description' => t('The password that will be required for moderators to join the meeting or for certain administrative actions (i.e. ending a meeting). This is optional, and if not supplied, BBB will assign a random password.'),
    );
    $form['bbb']['attendeePW'] = array(
      '#title' => t('Attendee password'),
      '#type' => 'textfield',
      '#default_value' => $meeting->attendeePW,
      '#maxlength' => 32,
      '#description' => t('The password that will be required for attendees to join the meeting. This is optional, and if not supplied, BBB will assign a random password.'),
    );
    $form['bbb']['logoutURL'] = array(
      '#title' => t('Logout URL'),
      '#type' => 'textfield',
      '#default_value' => $meeting->logoutURL,
      '#maxlength' => 255,
      '#description' => t('The URL that the BigBlueButton client will go to after users click the OK button on the <em>You have been logged out message</em>.'),
    );
  }
}

/**
 * Implement hook_nodeapi().
 */
function bbb_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (!bbb_is_meeting_type($node->type)) {
    return;
  }
  
  switch ($op) {
    case 'insert':
      foreach ($node->bbb as $key => $value) {
        if (empty($node->bbb[$key])) {
          unset($node->bbb[$key]);
        }
      }
      bbb_create_meeting($node, $node->bbb);
      break;
    case 'update':
      $meeting = bbb_get_meeting($node->nid);
      if ($meeting->is_running) {
        drupal_set_message(t('Could not update conference settings while meeting in progress.'), 'error');
        return;
      }
      foreach ($node->bbb as $key => $value) {
        if (empty($node->bbb[$key])) {
          unset($node->bbb[$key]);
        }
      }
      bbb_update_meeting($node, $node->bbb);
      break;
    case 'view':
      $meeting = bbb_get_meeting($node->nid);
      $node->content['bbb_meeting_status'] = array(
        '#value' => theme('bbb_meeting_status', $meeting),
        '#weight' => 10,
      );
      $node->content['bbb_meeting_start'] = array(
        '#value' => theme('bbb_meeting_start', $meeting),
        '#weight' => 10,
      );
      break;
    case 'delete':
      bbb_delete_meeting($node->nid);
      break;
  }
}

/**
 * Implement hook_link().
 */
function bbb_link($type, $object, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && bbb_is_meeting_type($object->type)) {
    if (!$teaser) {

      $meeting = bbb_get_meeting($object->nid);
      if ((user_access('moderate meetings') || user_access('administer bigbluebutton')) ||
          $user->uid == $node->uid && user_access('moderate own meetings')) {
        $links['bbb_meeting_join_moderator'] = array(
          'title' => $meeting->is_running ? t('Join meeting as moderator') : t('Start meeting'),
          'href' => "node/$object->nid/join/moderator",
        );
      }
      if (user_access('attend meetings') || user_access('administer bigbluebutton')) {
        $links['bbb_meeting_join_attendee'] = array(
          'title' => t('Join meeting'),
          'href' => "node/$object->nid/join/attendee",
        );
      }

    }
  }
  return $links;
}

/**
 * Implement hook_theme().
 */
function bbb_theme($existing, $type, $theme, $path) {
  return array(
    'bbb_meeting_status' => array(
      'arguments' => array('meeting' => NULL),
    ),
    'bbb_meeting_join_moderator' => array(
      'arguments' => array('meeting' => NULL),
    ),
    'bbb_meeting_join_attendee' => array(
      'arguments' => array('meeting' => NULL),
    ),
  );
}

/* Helper functions */

/**
 * Check if user is meeting owner
 */
function bbb_is_meeting_owner($nid, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }
  $owner = db_result(db_query("SELECT COUNT(nid) FROM {bbb_meetings} bm
                                 INNER JOIN {node} n ON bm.nid = n.nid
                                 WHERE n.uid = %d
                                   AND nid = %d", $account->uid, $nid));
  return $owner ? TRUE : FALSE;
}

/**
 * Check if node type is meeting
 */
function bbb_is_meeting_type($type) {
  return variable_get('bbb_content_type_usage_'. $type, FALSE);
}

/**
 * Return a meeting object
 */
function bbb_get_meeting($nid, $account = NULL) {
  if (!$account) {
    global $user;
    $account = $user;
  }

  $meeting = new stdClass();
  $meeting = db_fetch_object(db_query("SELECT * FROM {bbb_meetings} WHERE nid = %d", $nid));
  $meeting->is_running = bbb_api_isMeetingRunning(array('meetingToken' => $meeting->meetingToken));
  $meeting->url = array(
    'join_attendee' => bbb_api_join(array('fullName' => $account->name, 'meetingToken' => $meeting->meetingToken, 'password' => $meeting->attendeePW)),
    'join_moderator' => bbb_api_join(array('fullName' => $account->name, 'meetingToken' => $meeting->meetingToken, 'password' => $meeting->moderatorPW)),
  );
  // Allow alteration for e.g. access control
  // Just implement hook_bigbluebutton_meeting_alter(&$data) {} in your module
  drupal_alter('bigbluebutton_meeting', &$meeting);
  return $meeting;
}

/**
 * Update meeting
 */
function bbb_update_meeting($node, $params = array()) {
  db_query("DELETE FROM {bbb_meetings} WHERE nid= %d", $node->nid);
  unset($params['meetingToken']);
  unset($params['meetingID']);
  return bbb_create_meeting($node, $params);
}

/**
 * Create meeting
 */
function bbb_create_meeting($node, $params = array()) {
  $params += array(
    'name' => check_plain($node->title),
    'meetingID' => 'drupal-bigbluebutton-' . $node->type . '-' . $node->nid . '-' . time(),
    'attendeePW' => user_password(),
    'moderatorPW' => user_password(),
    'welcome' => t('Welcome to @title', array('@title' => $node->title)),
    'dialNumber' => '',
    'logoutURL' => url('node/' . $node->nid, array('absolute' => TRUE)),
  );
  if ($data = bbb_api_create($params)) {
    $data->nid = $node->nid;
    $data->created = time();
    drupal_write_record('bbb_meetings', array_merge($params, (array) $data));
  }
  return FALSE;
}

/**
 * Delete meeting
 */
function bbb_delete_meeting($nid) {
  return db_query("DELETE FROM {bbb_meetings} WHERE nid = %d", $nid);
}

/* Menu Callbacks */

/**
 * Redirect to bigbluebutton instance; Menu callback
 * 
 * @param OBJECT $node
 *   A Drupal node object
 * @param STRING $role
 *   One of 'attendee' or 'moderator'
 * 
 */
function bbb_join($node, $role) {
  global $user;

  $url = array();
  $meeting = bbb_get_meeting($node->nid);

  $stats = new stdClass();
  $stats->nid  = $node->nid;
  $stats->uid  = $node->uid;
  $stats->role = $role;
  $stats->joined = time();

  // Get redirect URL
  $url = parse_url($meeting->url['join_' . $role]);

  // Log stats
  drupal_write_record('bbb_stats', $stats);

  unset($_SESSION['bbb_meeting_join']);

  if ($role == 'moderator') {
    drupal_goto($url['scheme'] . '://' . $url['host'] . $url['path'], $url['query']);
  }
  else if ($meeting->is_running) {
    drupal_goto($url['scheme'] . '://' . $url['host'] . $url['path'], $url['query']);
  }
  else {
    drupal_set_message(t('%meeting has not yet started. You will be notified when it started, in the meanwhile you may continue browsing this site.', array('%meeting' => $meeting->name)));
    $_SESSION['bbb_meeting_join'] = $node->nid;
    drupal_goto('node/' . $node->nid);
  }
  die();
}

/* Themeables */

/**
 * Theme meeting status
 */
function theme_bbb_meeting_status($meeting) {
  $output = '<div>';
  $output .= t('Status: !state', array('!state' => ($meeting->is_running ? t('Meeting is in progress.') : t('Meeting has not yet started.'))));
  $output .= '</div>';
  return $output;
}
